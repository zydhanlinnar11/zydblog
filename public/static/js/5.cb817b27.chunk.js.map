{"version":3,"sources":["components/NotAvailable.tsx","model/User.ts","service/APIv2UserService.ts","model/File.ts","components/post/PostPageJSXElement.tsx","service/APIv2FileService.ts","page/PostPage.tsx","model/Post.ts","service/APIv2PostService.ts","components/title-box.tsx"],"names":["NotAvailable","props","text","className","icon","faBan","User","user_id","name","user_name","this","APIv2UserService","id","callback","a","fetch","response","ok","Error","json","user","username","undefined","console","error","File","file_name","url","PostPageJSXElement","unknownUser","loadingPost","Post","blankPost","defaultCover","blogConfig","getTitleBoxDefaultBackground","slug","postService","userService","fileService","useState","post","setPost","setUser","LoadingAnimation","content","setContent","cover","setCover","useEffect","getPost","fetchedPost","blankContent","getUser","getAuthor","fetchedUser","getFile","getCoverFileName","fetchedCover","properContent","getTitle","getUserName","getLocalDateString","html","getSanitizedHtml","backgroundURL","getUrl","title","APIv2FileService","file","PostPage","match","APIv2PostService","params","dateISOFormatString","coverFileName","postOptionalAttributes","Date","getDateISOFormatString","toLocaleString","description","author","sanitizedHtml","getSlug","coverUrl","posts","map","created_at","cover_url","cover_file_name","sanitized_html","TitleBox","style","backgroundImage","backgroundPosition","backgroundSize"],"mappings":"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","file":"static/js/5.cb817b27.chunk.js","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBan } from '@fortawesome/free-solid-svg-icons'\n\ninterface NotAvailableProps {\n  text: string\n}\n\nfunction NotAvailable(props: NotAvailableProps) {\n  const { text } = props\n  return (\n    <div className=\"icon-only-div\">\n      <FontAwesomeIcon className=\"middle-icon\" icon={faBan} />\n      <h4 className=\"middle-text\">{text}</h4>\n    </div>\n  )\n}\n\nexport default NotAvailable\n","class User {\r\n    private name: string;\r\n    private user_name: string;\r\n    private user_id: string;\r\n\r\n    constructor(user_id: string, name: string, user_name: string) {\r\n        this.user_id = user_id;\r\n        this.name = name;\r\n        this.user_name = user_name;\r\n    }\r\n\r\n    getId() {\r\n        return this.user_id;\r\n    }\r\n\r\n    getName() {\r\n        return this.name;\r\n    }\r\n\r\n    getUserName() {\r\n        return this.user_name;\r\n    }\r\n}\r\n\r\nexport default User;\r\n","import IUserService from \"../contract/IUserService\";\r\nimport User from \"../model/User\";\r\n\r\ninterface responseObjectModel {\r\n    name: string;\r\n    username: string;\r\n}\r\n\r\nclass APIv2UserService implements IUserService {\r\n    async getUser(\r\n        id: string,\r\n        callback: (user: User | undefined) => void\r\n    ): Promise<void> {\r\n        try {\r\n            const response = await fetch(`/api/user/${id}`);\r\n            if (!response.ok) throw new Error(\"Error\");\r\n            const user: responseObjectModel = await response.json();\r\n            callback(new User(id, user.name, user.username));\r\n        } catch (error) {\r\n            callback(undefined);\r\n            console.error(\r\n                \"APIv2UserService.getUser(): Unable to fetch data from API\"\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default APIv2UserService;\r\n","class File {\r\n    private file_name: string;\r\n    private url: string;\r\n\r\n    constructor(file_name: string, url: string) {\r\n        this.file_name = file_name;\r\n        this.url = url;\r\n    }\r\n\r\n    getFileName() {\r\n        return this.file_name;\r\n    }\r\n\r\n    getUrl() {\r\n        return this.url;\r\n    }\r\n}\r\n\r\nexport default File;\r\n","import { useEffect, useState } from 'react'\nimport IPostService from '../../contract/IPostService'\nimport Post from '../../model/Post'\nimport '../../css/Post.css'\nimport TitleBox from '../title-box'\nimport LoadingAnimation from '../LoadingAnimation'\nimport NotAvailable from '../NotAvailable'\nimport ReactHtml from 'raw-html-react'\nimport User from '../../model/User'\nimport IUserService from '../../contract/IUserService'\nimport IFileService from '../../contract/IFileService'\nimport File from '../../model/File'\nimport blogConfig from '../../utilities/config'\n\ninterface PostPageJSXElementProps {\n  slug: string\n  postService: IPostService\n  userService: IUserService\n  fileService: IFileService\n}\n\nconst PostPageJSXElement = (props: PostPageJSXElementProps) => {\n  const unknownUser = new User('unknown', 'Unknown User', 'unknown')\n  const loadingPost = new Post('Loading post...', '', '')\n  const blankPost = new Post(\"This post isn't available\", '', '')\n  const defaultCover = new File(\n    'default-cover',\n    blogConfig.getTitleBoxDefaultBackground()\n  )\n  const { slug, postService, userService, fileService } = props\n  const [post, setPost] = useState((): Post => loadingPost)\n  const [user, setUser] = useState((): User => unknownUser)\n  const [content, setContent] = useState(() => <LoadingAnimation />)\n  const [cover, setCover] = useState(() => defaultCover)\n\n  useEffect(() => {\n    postService.getPost(slug, (fetchedPost: Post | undefined) => {\n      if (!fetchedPost) {\n        setPost(blankPost)\n        const blankContent = <NotAvailable text=\"This page isn't available\" />\n        setContent(blankContent)\n        return\n      }\n      setPost(fetchedPost)\n    })\n  }, [])\n\n  useEffect(() => {\n    if (post == loadingPost) return\n    userService.getUser(\n      post.getAuthor() || '',\n      (fetchedUser: User | undefined) => {\n        if (!fetchedUser) return\n        setUser(fetchedUser)\n      }\n    )\n    fileService.getFile(post.getCoverFileName(), (fetchedCover) => {\n      if (!fetchedCover) return\n      setCover(fetchedCover)\n    })\n  }, [post])\n\n  useEffect(() => {\n    if (user == unknownUser) return\n    const properContent = (\n      <div className='post-content-container'>\n        <div className='post-content'>\n          <h3 className='post-content-title'>{post.getTitle()}</h3>\n          <p className='post-content-info'>\n            <span className='not-highlighted'>Created by</span>{' '}\n            {user.getUserName()} <span className='not-highlighted'>on</span>{' '}\n            {post.getLocalDateString()}\n          </p>\n          <hr />\n          <ReactHtml html={post.getSanitizedHtml()} />\n        </div>\n      </div>\n    )\n    setContent(properContent)\n  }, [user])\n\n  return (\n    <main>\n      <TitleBox backgroundURL={cover.getUrl()} title={post.getTitle()} />\n      {content}\n    </main>\n  )\n}\n\nexport default PostPageJSXElement\n","import IFileService from \"../contract/IFileService\";\r\nimport File from \"../model/File\";\r\nimport User from \"../model/User\";\r\n\r\ninterface responseObjectModel {\r\n    file_name: string;\r\n    url: string;\r\n}\r\n\r\nclass APIv2FileService implements IFileService {\r\n    async getFile(\r\n        file_name: string,\r\n        callback: (file: File | undefined) => void\r\n    ): Promise<void> {\r\n        try {\r\n            const response = await fetch(`/api/file/${file_name}`);\r\n            if (!response.ok) throw new Error(\"Error\");\r\n            const file: responseObjectModel = await response.json();\r\n            callback(new File(file.file_name, file.url));\r\n        } catch (error) {\r\n            callback(undefined);\r\n            console.error(\r\n                \"APIv2FileService.getFile(): Unable to fetch data from API\"\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default APIv2FileService;\r\n","import { RouteComponentProps } from \"react-router\";\nimport APIv2PostService from \"../service/APIv2PostService\";\nimport APIv2UserService from \"../service/APIv2UserService\";\nimport Post from \"../model/Post\";\nimport PostPageJSXElement from \"../components/post/PostPageJSXElement\";\nimport APIv2FileService from \"../service/APIv2FileService\";\n\ninterface Params {\n    slug: string;\n}\n\nconst PostPage = ({ match }: RouteComponentProps<Params>) => {\n    const postService = new APIv2PostService();\n    const userService = new APIv2UserService();\n    const fileService = new APIv2FileService();\n    return PostPageJSXElement({\n        postService,\n        userService,\n        fileService,\n        slug: match.params.slug,\n    });\n};\n\nexport default PostPage;\n","interface PostOptionalAttributes {\n    description?: string;\n    slug?: string;\n    author?: string;\n    sanitizedHtml?: string;\n    coverUrl?: string;\n}\n\nclass Post {\n    private title: string;\n    private dateISOFormatString: string;\n    private coverFileName: string;\n    private postOptionalAttributes?: PostOptionalAttributes;\n\n    constructor(\n        title: string,\n        dateISOFormatString: string,\n        coverFileName: string,\n        postOptionalAttributes?: PostOptionalAttributes\n    ) {\n        this.title = title;\n        this.dateISOFormatString = dateISOFormatString;\n        this.coverFileName = coverFileName;\n        this.postOptionalAttributes = postOptionalAttributes;\n    }\n\n    getTitle(): string {\n        return this.title;\n    }\n\n    getDateISOFormatString(): string {\n        return this.dateISOFormatString;\n    }\n\n    getLocalDateString(): string {\n        return new Date(this.getDateISOFormatString()).toLocaleString();\n    }\n\n    getCoverFileName(): string {\n        return this.coverFileName;\n    }\n\n    getDescription(): string | undefined {\n        return this.postOptionalAttributes?.description;\n    }\n\n    getSlug(): string | undefined {\n        return this.postOptionalAttributes?.slug;\n    }\n\n    getAuthor(): string | undefined {\n        return this.postOptionalAttributes?.author;\n    }\n\n    getSanitizedHtml(): string {\n        if (this.postOptionalAttributes?.sanitizedHtml)\n            return this.postOptionalAttributes.sanitizedHtml;\n        return \"<h1>No content available</h1>\";\n    }\n\n    getURL(): string | undefined {\n        if (!this.getSlug()) return this.getSlug();\n        return `/post/${this.getSlug()}`;\n    }\n\n    getCoverURL(): string | undefined {\n        return this.postOptionalAttributes?.coverUrl;\n    }\n}\n\nexport default Post;\n","import IPostService from \"../contract/IPostService\";\nimport Post from \"../model/Post\";\n\ninterface listResponseModel {\n    title: string;\n    created_at: string;\n    description: string;\n    slug: string;\n    cover_url: string;\n}\n\ninterface singleResponseModel {\n    title: string;\n    created_at: string;\n    cover_file_name: string;\n    sanitized_html: string;\n    user_id: string;\n}\n\nclass APIv2PostService implements IPostService {\n    async getListPosts(callback: (posts: Post[]) => void) {\n        try {\n            const response = await fetch(\"/api/posts\");\n            const posts: listResponseModel[] = await response.json();\n            if (!response.ok) throw new Error(\"Error\");\n            callback(\n                posts.map(\n                    (post) =>\n                        new Post(post.title, post.created_at, \"\", {\n                            description: post.description,\n                            slug: post.slug,\n                            coverUrl: post.cover_url,\n                        })\n                )\n            );\n        } catch (error) {\n            callback([]);\n            console.error(\n                \"APIv2PostService.getListPosts(): Unable to fetch data from API\"\n            );\n        }\n    }\n\n    async getPost(slug: string, callback: (post: Post | undefined) => void) {\n        try {\n            const response = await fetch(`/api/post/${slug}`);\n            if (!response.ok) throw new Error(\"Error\");\n            const post: singleResponseModel = await response.json();\n            callback(\n                new Post(post.title, post.created_at, post.cover_file_name, {\n                    author: post.user_id,\n                    sanitizedHtml: post.sanitized_html,\n                })\n            );\n        } catch (error) {\n            callback(undefined);\n            console.error(\n                \"APIv2PostService.getPost(): Unable to fetch data from API\"\n            );\n        }\n    }\n}\n\nexport default APIv2PostService;\n","import '../css/title-box.css'\n\ninterface TitleBoxProps {\n  title: string\n  backgroundURL: string\n}\n\nconst TitleBox = (props: TitleBoxProps) => {\n  const { title, backgroundURL } = props\n  return (\n    <div\n      style={{\n        backgroundImage: `url(${backgroundURL})`,\n        backgroundPosition: 'center',\n        backgroundSize: 'cover',\n      }}\n      className='title-box-container'\n    >\n      <h1 className='title-box-post-title'>{title}</h1>\n    </div>\n  )\n}\n\nexport default TitleBox\n"],"sourceRoot":""}