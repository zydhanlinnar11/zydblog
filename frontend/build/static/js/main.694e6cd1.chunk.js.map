{"version":3,"sources":["img/title-bg.webp","utilities/config.tsx","utilities/theme.tsx","components/navbar/NavbarButtons.tsx","components/navbar/NavbarLayout.tsx","components/footer.tsx","components/post/Post.tsx","components/post/APIv1PostService.tsx","components/title-box.tsx","components/post/PostItem.tsx","components/LoadingAnimation.tsx","components/NotAvailable.tsx","components/post/ListOfContentsJSXElement.tsx","components/post/ListOfContents.tsx","components/post/PostPageJSXElement.tsx","components/post/PostPage.tsx","App.tsx","index.tsx"],"names":["blogConfig","blogName","titleBoxDefaultBackground","blogOptionalConfig","this","customRightFooterText","customHomeHeaderTitle","getBlogName","defaultTitleBoxBackground","isDark","isSetDarkModeInLocalStorage","localStorage","getItem","isSetDarkModeInSystemSetting","window","matchMedia","setDark","document","body","classList","add","remove","setItem","setLight","isLight","VerticalDivider","key","className","navbarButtonsArray","style","textDecoration","to","Button","onClick","open","useState","blogTheme","navDarkMode","setNavDarkMode","getNavbarButtons","map","item","String","NavbarLayout","Footer","getRightFooterText","Post","title","dateISOFormatString","coverFileName","postService","postOptionalAttributes","coverURL","thumbnailURL","getTitleBoxDefaultBackground","Date","getDateISOFormatString","toLocaleString","getPostCoverURL","getPostThumbnailURL","description","slug","author","sanitizedHtml","getSlug","APIv1PostService","POSTS_API_URL","IMAGE_STORAGE_URL","callback","a","fetch","response","json","posts","ok","Error","post","date","coverFilename","console","error","undefined","screenWidths","currentWidth","innerWidth","devicePixelRatio","i","length","getScreenWidth","thumbnailScaleFactor","thumbnailDPI","currentScaleFactor","getScreenDPI","TitleBox","props","backgroundURL","backgroundImage","backgroundPosition","backgroundSize","noPaddingTextButton","createMuiTheme","overrides","MuiButton","text","padding","color","transition","root","background","PostItem","localDate","customTheme","ThemeProvider","theme","width","src","alt","LoadingAnimation","icon","faSpinner","NotAvailable","faBan","ListOfContentsLayout","emptyPosts","setPosts","ListOfContentsLayoutJsx","setListOfContentsLayoutJsx","isFetched","setFetched","useEffect","getListPosts","contentAvailableLayout","getURL","getTitle","getLocalDateString","getDescription","getThumbnailURL","config","ListOfContents","ListOfContentsJSXElement","PostPageJSXElement","loadingPost","blankPost","setPost","content","setContent","getPost","fetchedPost","properContent","getAuthor","html","getSanitizedHtml","getCoverURL","PostPage","match","params","App","path","exact","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.694e6cd1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/title-bg.09c8bf32.webp\";","import defaultTitleBoxBackground from '../img/title-bg.webp'\r\n\r\ninterface BlogOptionalConfig {\r\n  customRightFooterText?: string\r\n  customHomeHeaderTitle?: string\r\n}\r\n\r\nclass BlogConfig {\r\n  private blogName: string\r\n  private blogOptionalConfig: BlogOptionalConfig\r\n  private titleBoxDefaultBackground: string\r\n\r\n  constructor(\r\n    blogName: string,\r\n    titleBoxDefaultBackground: string,\r\n    blogOptionalConfig: BlogOptionalConfig = {}\r\n  ) {\r\n    this.blogName = blogName\r\n    this.blogOptionalConfig = blogOptionalConfig\r\n    this.titleBoxDefaultBackground = titleBoxDefaultBackground\r\n  }\r\n\r\n  getBlogName(): string {\r\n    return this.blogName\r\n  }\r\n\r\n  getRightFooterText(): string {\r\n    if (this.blogOptionalConfig.customRightFooterText)\r\n      return this.blogOptionalConfig.customRightFooterText\r\n    return 'Created with React'\r\n  }\r\n\r\n  getHomeHeaderTitle(): string {\r\n    if (this.blogOptionalConfig.customHomeHeaderTitle)\r\n      return this.blogOptionalConfig.customHomeHeaderTitle\r\n    return this.getBlogName()\r\n  }\r\n\r\n  getTitleBoxDefaultBackground(): string {\r\n    return this.titleBoxDefaultBackground\r\n  }\r\n}\r\n\r\nconst blogConfig = new BlogConfig(\"Zydhan's Blog\", defaultTitleBoxBackground, {\r\n  customHomeHeaderTitle: \"Welcome to Zydhan's Blog\",\r\n})\r\n\r\nexport default blogConfig\r\n","function setDark() {\r\n  document.body.classList.add('dark-mode')\r\n  document.body.classList.remove('light-mode')\r\n  localStorage.setItem('darkMode', 'true')\r\n}\r\n\r\nfunction setLight() {\r\n  document.body.classList.add('light-mode')\r\n  document.body.classList.remove('dark-mode')\r\n  localStorage.setItem('darkMode', 'false')\r\n}\r\n\r\nconst isLight = () => {\r\n  return !isDark\r\n}\r\n\r\nconst isDark = () => {\r\n  const isSetDarkModeInLocalStorage =\r\n    localStorage.getItem('darkMode') === 'true'\r\n  const isSetDarkModeInSystemSetting =\r\n    window.matchMedia && window.matchMedia('(prefers-color-scheme: dark))')\r\n  return isSetDarkModeInLocalStorage || isSetDarkModeInSystemSetting\r\n}\r\n\r\nexport default { setDark, setLight, isLight }\r\n","import { useState } from 'react'\r\nimport blogTheme from '../../utilities/theme'\r\nimport { Button } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst HomeButton = (key: string) => {\r\n  return (\r\n    <Link key={key} style={{ textDecoration: 'none' }} to=\"/\">\r\n      <Button className=\"nav-btn\">\r\n        <h6>Home</h6>\r\n      </Button>\r\n    </Link>\r\n  )\r\n}\r\n\r\nconst ResumeButton = (key: string) => {\r\n  const RESUME_URL = 'https://zydhanlinnar11.github.io/resume/'\r\n  return (\r\n    <Button\r\n      key={key}\r\n      className=\"nav-btn\"\r\n      onClick={() => {\r\n        window.open(RESUME_URL)\r\n      }}\r\n    >\r\n      <h6>Resume</h6>\r\n    </Button>\r\n  )\r\n}\r\n\r\nconst ToggleThemeButton = (key: string) => {\r\n  const [navDarkMode, setNavDarkMode] = useState(!blogTheme.isLight())\r\n  return (\r\n    <Button\r\n      key={key}\r\n      className=\"nav-btn\"\r\n      onClick={() => {\r\n        if (!navDarkMode) {\r\n          blogTheme.setDark()\r\n          setNavDarkMode(true)\r\n        } else {\r\n          blogTheme.setLight()\r\n          setNavDarkMode(false)\r\n        }\r\n      }}\r\n    >\r\n      <h6>{navDarkMode ? 'Light' : 'Dark'} mode</h6>\r\n    </Button>\r\n  )\r\n}\r\n\r\nconst VerticalDivider = (key: string) => (\r\n  <div key={key} className=\"vertical-bar\"></div>\r\n)\r\n\r\nconst navbarButtonsArray = [\r\n  HomeButton,\r\n  VerticalDivider,\r\n  ResumeButton,\r\n  VerticalDivider,\r\n  ToggleThemeButton,\r\n]\r\n\r\nconst getNavbarButtons = () => {\r\n  let key = 0\r\n  return navbarButtonsArray.map((item) => item(String(key++)))\r\n}\r\n\r\nexport default getNavbarButtons\r\n","import '../../css/navbar.css'\r\nimport blogConfig from '../../utilities/config'\r\nimport getNavbarButtons from './NavbarButtons'\r\n\r\nfunction NavbarLayout() {\r\n  return (\r\n    <header>\r\n      <nav>\r\n        <h1>{blogConfig.getBlogName()}</h1>\r\n        <div className=\"nav-btn-group\">{getNavbarButtons()}</div>\r\n      </nav>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default NavbarLayout\r\n","import '../css/footer.css'\r\nimport blogConfig from '../utilities/config'\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <div className=\"horizontal-line\" />\r\n      <div className=\"footer-inner-container\">\r\n        <h4 className=\"footer-text\">{blogConfig.getBlogName()}</h4>\r\n        <div className=\"vertical-line\" />\r\n        <h4 className=\"footer-text\">{blogConfig.getRightFooterText()}</h4>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import blogConfig from '../../utilities/config'\r\nimport IPost from './IPost'\r\nimport IPostService from './IPostService'\r\n\r\ninterface PostOptionalAttributes {\r\n  description?: string\r\n  slug?: string\r\n  author?: string\r\n  sanitizedHtml?: string\r\n}\r\n\r\nclass Post implements IPost {\r\n  private title: string\r\n  private dateISOFormatString: string\r\n  private coverFileName: string\r\n  private coverURL: string\r\n  private thumbnailURL: string\r\n  private postService: IPostService\r\n  private postOptionalAttributes?: PostOptionalAttributes\r\n\r\n  constructor(\r\n    title: string,\r\n    dateISOFormatString: string,\r\n    coverFileName: string,\r\n    postService: IPostService,\r\n    postOptionalAttributes?: PostOptionalAttributes\r\n  ) {\r\n    this.title = title\r\n    this.dateISOFormatString = dateISOFormatString\r\n    this.coverFileName = coverFileName\r\n    this.coverURL = blogConfig.getTitleBoxDefaultBackground()\r\n    this.thumbnailURL = blogConfig.getTitleBoxDefaultBackground()\r\n    this.postService = postService\r\n    this.postOptionalAttributes = postOptionalAttributes\r\n  }\r\n\r\n  getTitle(): string {\r\n    return this.title\r\n  }\r\n\r\n  getDateISOFormatString(): string {\r\n    return this.dateISOFormatString\r\n  }\r\n\r\n  getLocalDateString(): string {\r\n    return new Date(this.getDateISOFormatString()).toLocaleString()\r\n  }\r\n\r\n  getCoverURL(): string {\r\n    if (this.coverFileName === '')\r\n      return blogConfig.getTitleBoxDefaultBackground()\r\n    return this.postService.getPostCoverURL(this.coverFileName)\r\n  }\r\n\r\n  getThumbnailURL() {\r\n    if (this.coverFileName === '')\r\n      return blogConfig.getTitleBoxDefaultBackground()\r\n    return this.postService.getPostThumbnailURL(this.coverFileName)\r\n  }\r\n\r\n  getDescription(): string {\r\n    if (this.postOptionalAttributes?.description)\r\n      return this.postOptionalAttributes.description\r\n    else return 'No description available'\r\n  }\r\n\r\n  getSlug(): string {\r\n    if (this.postOptionalAttributes?.slug)\r\n      return this.postOptionalAttributes.slug\r\n    return 'not-found'\r\n  }\r\n\r\n  getAuthor(): string {\r\n    if (this.postOptionalAttributes?.author)\r\n      return this.postOptionalAttributes.author\r\n    return 'Unknown User'\r\n  }\r\n\r\n  getSanitizedHtml(): string {\r\n    if (this.postOptionalAttributes?.sanitizedHtml)\r\n      return this.postOptionalAttributes.sanitizedHtml\r\n    return '<h1>No content available</h1>'\r\n  }\r\n\r\n  getURL(): string {\r\n    return `/post/${this.getSlug()}`\r\n  }\r\n}\r\n\r\nexport default Post\r\n","import blogConfig from '../../utilities/config'\r\nimport IPost from './IPost'\r\nimport IPostService from './IPostService'\r\nimport Post from './Post'\r\n\r\ninterface responseObjectModel {\r\n  title: string\r\n  date: string\r\n  coverFilename: string\r\n  description?: string\r\n  markdown?: string\r\n  slug?: string\r\n  sanitizedHtml?: string\r\n  author?: string\r\n}\r\n\r\nclass APIv1PostService implements IPostService {\r\n  private POSTS_API_URL = '/posts'\r\n  private IMAGE_STORAGE_URL =\r\n    'https://storage.googleapis.com/zydhan-web.appspot.com'\r\n\r\n  async getListPosts(callback: (posts: IPost[]) => void) {\r\n    try {\r\n      const response = await fetch(this.POSTS_API_URL)\r\n      const posts: responseObjectModel[] = await response.json()\r\n      if (!response.ok) throw new Error('Error')\r\n      callback(\r\n        posts.map(\r\n          (post) =>\r\n            new Post(post.title, post.date, post.coverFilename, this, {\r\n              description: post.description,\r\n              slug: post.slug,\r\n            })\r\n        )\r\n      )\r\n    } catch (error) {\r\n      callback([])\r\n      console.error(\r\n        'APIv1PostService.getListPosts(): Unable to fetch data from API'\r\n      )\r\n    }\r\n  }\r\n\r\n  async getPost(slug: string, callback: (post: IPost | undefined) => void) {\r\n    try {\r\n      const response = await fetch(`${this.POSTS_API_URL}/${slug}`)\r\n      if (!response.ok) throw new Error('Error')\r\n      const post: responseObjectModel = await response.json()\r\n      callback(\r\n        new Post(post.title, post.date, post.coverFilename, this, {\r\n          author: post.author,\r\n          sanitizedHtml: post.sanitizedHtml,\r\n        })\r\n      )\r\n    } catch (error) {\r\n      callback(undefined)\r\n      console.error('APIv1PostService.getPost(): Unable to fetch data from API')\r\n    }\r\n  }\r\n\r\n  private getScreenWidth(): number {\r\n    const screenWidths = [320, 480, 640, 720, 1080, 1366]\r\n    const currentWidth = window.innerWidth * window.devicePixelRatio\r\n    for (let i = 0; i < screenWidths.length; i++)\r\n      if (currentWidth <= screenWidths[i]) return screenWidths[i]\r\n    return screenWidths[screenWidths.length - 1]\r\n  }\r\n\r\n  getPostCoverURL(coverFilename: string): string {\r\n    return `${\r\n      this.IMAGE_STORAGE_URL\r\n    }/${coverFilename}-${this.getScreenWidth()}.webp`\r\n  }\r\n\r\n  private getScreenDPI(): string {\r\n    const thumbnailScaleFactor = [1, 2, 3, 4]\r\n    const thumbnailDPI = ['mdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']\r\n\r\n    const currentScaleFactor = window.devicePixelRatio\r\n    for (let i = 0; i < thumbnailScaleFactor.length; i++)\r\n      if (currentScaleFactor <= thumbnailScaleFactor[i]) return thumbnailDPI[i]\r\n    return thumbnailDPI[thumbnailDPI.length - 1]\r\n  }\r\n\r\n  getPostThumbnailURL(coverFilename: string): string {\r\n    return `${\r\n      this.IMAGE_STORAGE_URL\r\n    }/${coverFilename}-thumb-${this.getScreenDPI()}.webp`\r\n  }\r\n}\r\n\r\nexport default APIv1PostService\r\n","import '../css/title-box.css'\r\n\r\ninterface TitleBoxProps {\r\n  title: string\r\n  backgroundURL: string\r\n}\r\n\r\nconst TitleBox = (props: TitleBoxProps) => {\r\n  const { title, backgroundURL } = props\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundImage: `url(${backgroundURL})`,\r\n        backgroundPosition: 'center',\r\n        backgroundSize: 'cover',\r\n      }}\r\n      className=\"title-box-container\"\r\n    >\r\n      <h1 className=\"title-box-post-title\">{title}</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TitleBox\r\n","import '../../css/post-item.css'\r\nimport Button from '@material-ui/core/Button'\r\nimport { createMuiTheme, Theme, ThemeProvider } from '@material-ui/core/styles'\r\n\r\nconst noPaddingTextButton: Theme = createMuiTheme({\r\n  overrides: {\r\n    MuiButton: {\r\n      text: {\r\n        padding: '0',\r\n        color: 'var(--main-font-color)',\r\n        transition: 'color var(--transition-delay)',\r\n      },\r\n      root: {\r\n        background: 'var(--card-background)',\r\n      },\r\n    },\r\n  },\r\n})\r\n\r\ninterface PostItemProps {\r\n  title: string\r\n  localDate: string\r\n  description: string\r\n  thumbnailURL: string\r\n  customTheme?: Theme\r\n}\r\n\r\nfunction PostItem(props: PostItemProps) {\r\n  const { title, localDate, description, thumbnailURL, customTheme } = props\r\n  return (\r\n    <ThemeProvider theme={customTheme ? customTheme : noPaddingTextButton}>\r\n      <Button style={{ width: '100%' }} className=\"post-item-container\">\r\n        <img src={thumbnailURL} alt={`Thumbnail of ${title}`} />\r\n        <div className=\"right-container\">\r\n          <h2 className=\"post-title\">{title}</h2>\r\n          <h3 className=\"post-date\">{localDate}</h3>\r\n          <p className=\"post-desc\">{description}</p>\r\n        </div>\r\n      </Button>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default PostItem\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\r\nimport '../css/LoadingAnimation.css'\r\n\r\nfunction LoadingAnimation() {\r\n  return (\r\n    <div className=\"icon-only-div\">\r\n      <FontAwesomeIcon\r\n        className=\"middle-icon loading-animation\"\r\n        icon={faSpinner}\r\n      />\r\n      <h4 className=\"middle-text\">Loading...</h4>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoadingAnimation\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBan } from '@fortawesome/free-solid-svg-icons'\r\n\r\ninterface NotAvailableProps {\r\n  text: string\r\n}\r\n\r\nfunction NotAvailable(props: NotAvailableProps) {\r\n  const { text } = props\r\n  return (\r\n    <div className=\"icon-only-div\">\r\n      <FontAwesomeIcon className=\"middle-icon\" icon={faBan} />\r\n      <h4 className=\"middle-text\">{text}</h4>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NotAvailable\r\n","import { useState, useEffect } from 'react'\r\nimport IPostService from './IPostService'\r\nimport TitleBox from '../title-box'\r\nimport { Link } from 'react-router-dom'\r\nimport PostItem from './PostItem'\r\nimport LoadingAnimation from '../LoadingAnimation'\r\nimport NotAvailable from '../NotAvailable'\r\nimport config from '../../utilities/config'\r\nimport '../../css/ListOfContents.css'\r\nimport IPost from './IPost'\r\n\r\ninterface ListOfContentsLayoutProps {\r\n  postService: IPostService\r\n}\r\n\r\nfunction ListOfContentsLayout(props: ListOfContentsLayoutProps) {\r\n  const emptyPosts: IPost[] = []\r\n  const { postService } = props\r\n  const [posts, setPosts] = useState(() => emptyPosts)\r\n  const [ListOfContentsLayoutJsx, setListOfContentsLayoutJsx] = useState(() => (\r\n    <LoadingAnimation />\r\n  ))\r\n  const [isFetched, setFetched] = useState(() => false)\r\n\r\n  useEffect(() => {\r\n    postService.getListPosts(setPosts)\r\n    setFetched(true)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (!isFetched) return\r\n    const contentAvailableLayout = (\r\n      <div className=\"list-content\">\r\n        {posts.map((post) => (\r\n          <Link\r\n            style={{ textDecoration: 'none' }}\r\n            to={post.getURL()}\r\n            key={post.getSlug()}\r\n          >\r\n            <PostItem\r\n              title={post.getTitle()}\r\n              localDate={post.getLocalDateString()}\r\n              description={post.getDescription()}\r\n              thumbnailURL={post.getThumbnailURL()}\r\n            />\r\n          </Link>\r\n        ))}\r\n      </div>\r\n    )\r\n    if (posts.length === 0)\r\n      setListOfContentsLayoutJsx(<NotAvailable text=\"No content available.\" />)\r\n    else setListOfContentsLayoutJsx(contentAvailableLayout)\r\n  }, [posts])\r\n\r\n  return (\r\n    <main>\r\n      <TitleBox\r\n        title={config.getBlogName()}\r\n        backgroundURL={config.getTitleBoxDefaultBackground()}\r\n      />\r\n      {ListOfContentsLayoutJsx}\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default ListOfContentsLayout\r\n","import APIv1PostService from './APIv1PostService'\r\nimport ListOfContentsJSXElement from './ListOfContentsJSXElement'\r\n\r\nconst ListOfContents = () => {\r\n  return ListOfContentsJSXElement({ postService: new APIv1PostService() })\r\n}\r\n\r\nexport default ListOfContents\r\n","import { useEffect, useState } from 'react'\r\nimport IPostService from './IPostService'\r\nimport IPost from './IPost'\r\nimport '../../css/Post.css'\r\nimport TitleBox from '../title-box'\r\nimport LoadingAnimation from '../LoadingAnimation'\r\nimport NotAvailable from '../NotAvailable'\r\nimport ReactHtml from 'raw-html-react'\r\n\r\ninterface PostPageJSXElementProps {\r\n  slug: string\r\n  postService: IPostService\r\n  loadingPost: IPost\r\n  blankPost: IPost\r\n}\r\n\r\nconst PostPageJSXElement = (props: PostPageJSXElementProps) => {\r\n  const { slug, postService, loadingPost, blankPost } = props\r\n  const [post, setPost] = useState((): IPost => loadingPost)\r\n  const [content, setContent] = useState(() => <LoadingAnimation />)\r\n\r\n  useEffect(() => {\r\n    postService.getPost(slug, (fetchedPost: IPost | undefined) => {\r\n      if (fetchedPost) {\r\n        setPost(fetchedPost)\r\n        const properContent = (\r\n          <div className=\"post-content-container\">\r\n            <div className=\"post-content\">\r\n              <h3 className=\"post-content-title\">{fetchedPost.getTitle()}</h3>\r\n              <p className=\"post-content-info\">\r\n                <span className=\"not-highlighted\">Created by</span>{' '}\r\n                {fetchedPost.getAuthor()}{' '}\r\n                <span className=\"not-highlighted\">on</span>{' '}\r\n                {fetchedPost.getLocalDateString()}\r\n              </p>\r\n              <hr />\r\n              <ReactHtml html={fetchedPost.getSanitizedHtml()} />\r\n            </div>\r\n          </div>\r\n        )\r\n        setContent(properContent)\r\n        return\r\n      }\r\n      setPost(blankPost)\r\n      const blankContent = <NotAvailable text=\"This page isn't available\" />\r\n      setContent(blankContent)\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <main>\r\n      <TitleBox backgroundURL={post.getCoverURL()} title={post.getTitle()} />\r\n      {content}\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default PostPageJSXElement\r\n","import { RouteComponentProps } from 'react-router'\r\nimport APIv1PostService from './APIv1PostService'\r\nimport Post from './Post'\r\nimport PostPageJSXElement from './PostPageJSXElement'\r\n\r\ninterface Params {\r\n  slug: string\r\n}\r\n\r\nconst PostPage = ({ match }: RouteComponentProps<Params>) => {\r\n  const postService = new APIv1PostService()\r\n  const loadingPost = new Post('Loading post...', '', '', postService)\r\n  const blankPost = new Post(\"This post isn't available\", '', '', postService)\r\n  return PostPageJSXElement({\r\n    postService,\r\n    slug: match.params.slug,\r\n    loadingPost,\r\n    blankPost,\r\n  })\r\n}\r\n\r\nexport default PostPage\r\n","import NavbarLayout from './components/navbar/NavbarLayout'\r\nimport './css/App.css'\r\nimport Footer from './components/footer'\r\nimport ListOfContents from './components/post/ListOfContents'\r\nimport PostPage from './components/post/PostPage'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <NavbarLayout />\r\n        <div className=\"content\">\r\n          <Switch>\r\n            <Route path=\"/\" exact component={ListOfContents} />\r\n            <Route path=\"/post/:slug\" exact component={PostPage} />\r\n          </Switch>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './css/index.css'\r\nimport blogTheme from './utilities/theme'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\nif (blogTheme.isLight()) blogTheme.setLight()\r\nelse blogTheme.setDark()\r\n"],"sourceRoot":""}